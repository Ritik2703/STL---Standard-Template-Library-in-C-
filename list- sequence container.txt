List in C++ Standard Template Library (STL)
Lists are sequence containers that allow non-contiguous memory allocation. As compared to vector, list has slow traversal, but once a position has been found, insertion and deletion are quick. Normally, when we say a List, we talk about doubly linked list. For implementing a singly linked list, we use forward list.

 

Below is the program to show the working of some functions of List:

#include <iostream> 
#include <list> 
#include <iterator> 
using namespace std; 
  
//function for printing the elements in a list 
void showlist(list <int> g) 
{ 
    list <int> :: iterator it; 
    for(it = g.begin(); it != g.end(); ++it) 
        cout << '\t' << *it; 
    cout << '\n'; 
} 
  
int main() 
{ 
  
    list <int> gqlist1, gqlist2; 
  
  
    for (int i = 0; i < 10; ++i) 
    { 
        gqlist1.push_back(i * 2); 
        gqlist2.push_front(i * 3); 
    } 
    cout << "\nList 1 (gqlist1) is : "; 
    showlist(gqlist1); 
  
    cout << "\nList 2 (gqlist2) is : "; 
    showlist(gqlist2); 
  
    cout << "\ngqlist1.front() : " << gqlist1.front(); 
    cout << "\ngqlist1.back() : " << gqlist1.back(); 
  
    cout << "\ngqlist1.pop_front() : "; 
    gqlist1.pop_front(); 
    showlist(gqlist1); 
  
    cout << "\ngqlist2.pop_back() : "; 
    gqlist2.pop_back(); 
    showlist(gqlist2); 
  
    cout << "\ngqlist1.reverse() : "; 
    gqlist1.reverse(); 
    showlist(gqlist1); 
  
    cout << "\ngqlist2.sort(): "; 
    gqlist2.sort(); 
    showlist(gqlist2); 
  
    return 0; 
  
} 
The output of the above program is :

List 1 (gqlist1) is :     0    2    4    6    
8    10    12    14    16    18

List 2 (gqlist2) is :     27    24    21    18    
15    12    9    6    3    0

gqlist1.front() : 0
gqlist1.back() : 18
gqlist1.pop_front() :     2    4    6    8    
10    12    14    16    18

gqlist2.pop_back() :     27    24    21    18    
15    12    9    6    3

gqlist1.reverse() :     18    16    14    12    
10    8    6    4    2

gqlist2.sort():     3    6    9    12    
15    18    21    24    27
  

Functions used with List:

front() – Returns the value of the first element in the list.
back() – Returns the value of the last element in the list .
push_front(g) – Adds a new element ‘g’ at the beginning of the list .
push_back(g) – Adds a new element ‘g’ at the end of the list.
pop_front() – Removes the first element of the list, and reduces size of the list by 1.
pop_back() – Removes the last element of the list, and reduces size of the list by 1
list::begin() and list::end() in C++ STL– begin() function returns an iterator pointing to the first element of the list
end()– end() function returns an iterator pointing to the theoretical last element which follows the last element.
list rbegin() and rend() function in C++ STL– rbegin() returns a reverse iterator which points to the last element of the list. rend() returns a reverse iterator which points to the position before the beginning of the list.
list cbegin() and cend() function in C++ STL– cbegin() returns a constant random access iterator which points to the beginning of the list. cend() returns a constant random access iterator which points to the end of the list.
list crbegin() and crend() function in C++ STL– crbegin() returns a constant reverse iterator which points to the last element of the list i.e reversed beginning of container. crend() returns a constant reverse iterator which points to the theoretical element preceding the first element in the list i.e. the reverse end of the list.
empty() – Returns whether the list is empty(1) or not(0).
insert() – Inserts new elements in the list before the element at a specified position.
erase() – Removes a single element or a range of elements from the list.
assign() – Assigns new elements to list by replacing current elements and resizes the list.
remove() – Removes all the elements from the list, which are equal to given element.
list::remove_if() in C++ STL– Used to remove all the values from the list that correspond true to the predicate or condition given as parameter to the function.
reverse() – Reverses the list.
size() – Returns the number of elements in the list.
list resize()function in C++ STL– Used to resize a list container.
sort() – Sorts the list in increasing order.
list max_size() function in C++ STL– Returns the maximum number of elements a list container can hold.
list unique() in C++ STL– Removes all duplicate consecutive elements from the list.
list::emplace_front() and list::emplace_back() in C++ STL– emplace_front() function is used to insert a new element into the list container, the new element is added to the beginning of the list. emplace_back() function is used to insert a new element into the list container, the new element is added to the end of the list.
list::clear() in C++ STL– clear() function is used to remove all the elements of the list container, thus making it size 0.
list::operator= in C++ STL– This operator is used to assign new contents to the container by replacing the existing contents.
list::swap() in C++ STL– This function is used to swap the contents of one list with another list of same type and size.
list splice() function in C++ STL– Used to transfer elements from one list to another.
list merge() function in C++ STL– Merges two sorted lists into one
list emplace() function in C++ STL– Extends list by inserting new element at a given position.


1. emplace(position, value) :- This function is used to insert an element at the position specified.

2. emplace_back(value) :- This function adds value at end of list. It is different from push_back() by the fact that it directly creates element at position whereas push_back() first makes a temporary copy and copies from there. emplace_back() is faster in implementation than push_back() in most situations.

3. emplace_front :- This function adds value at beginning of list. It is different from push_front() by the fact that it directly creates element at position whereas push_front() first makes a temporary copy and copies from there. emplace_front() is faster in implementation than push_front() in most situations.


// C++ code to demonstrate the working of  
// emplace(), emplace_front() and emplace_back() 
#include<iostream> 
#include<list> // for list functions 
using namespace std; 
int main() 
{ 
    // Declaring a list 
    list<int> gqlist; 
      
    // Initialising list iterator 
    list<int>::iterator it= gqlist.begin(); 
      
    // Entering list element using emplace_back() 
    for (int i=1; i<=5; i++) 
    gqlist.emplace_back(i); 
      
    // Displaying list elements  
    cout << "List after emplace_back operation is : "; 
    for (int &x : gqlist) cout << x << " "; 
    cout << endl; 
      
    // Entering list element using emplace_front() 
    for (int i=10; i<=50; i+=10) 
    gqlist.emplace_front(i); 
      
    // Displaying list elements  
    cout << "List after emplace_front operation is : "; 
    for (int &x : gqlist) cout << x << " "; 
    cout << endl; 
      
    // using advance() to advance iterator position 
    advance(it,2); 
      
     // inserting element at 2nd position using emplace() 
    gqlist.emplace(it,100); 
      
     // Displaying list elements  
    cout << "List after emplace operation is : "; 
    for (int &x : gqlist) cout << x << " "; 
    cout << endl; 
      
    return 0; 
      
} 
Output:

List after emplace_back operation is : 1 2 3 4 5 
List after emplace_front operation is : 50 40 30 20 10 1 2 3 4 5 
List after emplace operation is : 50 100 40 30 20 10 1 2 3 4 5 
4. merge(list2) :- This function is used to merge list2 with list1. If both the lists are in sorted order, then the resulting list is also sorted.

5. remove_if(condition) :- This function removes the element from list on the basis of condition given in its argument.


// C++ code to demonstrate the working of  
// merge() and remove_if() 
#include<iostream> 
#include<list> // for list functions 
using namespace std; 
int main() 
{ 
    // Initializing list1 
    list<int> gqlist1 = {1, 2, 3}; 
      
    // Initializing list2 
    list<int> gqlist2 = {2, 4, 6}; 
      
    // using merge() to merge list1 with list2 
    gqlist1.merge(gqlist2); 
      
    // Displaying list elements  
    cout << "list1 after merge operation is : "; 
    for (int &x : gqlist1) cout << x << " "; 
    cout << endl; 
      
    // using remove_if() to remove odd elements 
    // removes 1 and 3 
    gqlist1.remove_if([](int x){return x%2!=0;}); 
      
    // Displaying list elements  
    cout << "list1 after remove_if operation is : "; 
    for (int &x : gqlist1) cout << x << " "; 
    cout << endl; 
      
    return 0; 
      
} 
Output:

list1 after merge operation is : 1 2 2 3 4 6 
list1 after remove_if operation is : 2 2 4 6 
6. unique() :- This function is used to delete the repeated occurrences of the number. List has to be sorted for this function to get executed.

7. splice(position, list2) :- This function is used to transfer elements from one list into another.


// C++ code to demonstrate the working of  
// unique() and splice() 
#include<iostream> 
#include<list> // for list functions 
using namespace std; 
int main() 
{ 
    // Initializing list1 
    list<int> gqlist1 = {1, 1, 1, 2, 2, 3, 3, 4}; 
      
    // Initializing list2 
    list<int> gqlist2 = {2, 4, 6}; 
      
    // Initializing list1 iterator 
    list<int>::iterator it = gqlist1.begin(); 
      
    // using advance() to increment iterator position 
    advance(it, 3); 
      
      
    // Displaying list elements  
    cout << "list1 before unique operation is : "; 
    for (int &x : gqlist1) cout << x << " "; 
    cout << endl; 
      
    // using unique() to remove repeating elements 
    gqlist1.unique(); 
      
    // Displaying list elements  
    cout << "list1 after unique operation is : "; 
    for (int &x : gqlist1) cout << x << " "; 
    cout << endl << endl; 
      
    // using splice() to splice list2 in list1 at position it 
    // inserts list2 after 2nd position 
    gqlist1.splice(it, gqlist2); 
      
    // Displaying list elements  
    cout << "list1 after splice operation is : "; 
    for (int &x : gqlist1) cout << x << " "; 
    cout << endl; 
      
      
    return 0; 
      
} 
Output:

list1 before unique operation is : 1 1 1 2 2 3 3 4 
list1 after unique operation is : 1 2 3 4 

list1 after splice operation is : 1 2 4 6 2 3 4 
8. swap(list2) :- This function is used to swap one list element with other.

// C++ code to demonstrate the working of  
// swap() 
#include<iostream> 
#include<list> // for list functions 
using namespace std; 
int main() 
{ 
    // Initializing list1 
    list<int> gqlist1 = {1, 2, 3, 4}; 
      
    // Initializing list1 
    list<int> gqlist2 = {2, 4, 6}; 
      
     // Displaying list before swapping 
     cout << "The contents of 1st list "
             "before swapping are : "; 
     for (int &x : gqlist1) 
         cout << x << " "; 
     cout << endl; 
     cout << "The contents of 2nd list "
             "before swapping are : "; 
     for (int &x : gqlist2) 
         cout << x << " "; 
     cout << endl; 
   
     // Use of swap() to swap the list 
     gqlist1.swap(gqlist2); 
   
     // Displaying list after swapping 
     cout << "The contents of 1st list "
             "after swapping are : "; 
     for (int &x : gqlist1) 
         cout << x << " "; 
     cout << endl; 
   
     cout << "The contents of 2nd list "
             "after swapping are : "; 
     for (int &x : gqlist2) 
         cout << x << " "; 
     cout << endl; 
      
    return 0; 
      
} 
Output:

The contents of 1st list before swapping are : 1 2 3 4 
The contents of 2nd list before swapping are : 2 4 6 
The contents of 1st list after swapping are : 2 4 6 
The contents of 2nd list after swapping are : 1 2 3 4 
